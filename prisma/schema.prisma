generator client {
  provider = "prisma-client-js"
  // Remover esta linha: output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Appointment {
  id              String        @id @default(uuid())
  name            String
  email           String
  phone           String
  appointmentDate DateTime
  time            String
  status          AppointmentStatus @default(PENDING)
  confirmedAt     DateTime?
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod?
  paidAt          DateTime?
  userId          String
  professionalId  String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  serviceId       String
  service         Service       @relation(fields: [serviceId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  professional    Professional? @relation(fields: [professionalId], references: [id])
  appointmentProducts AppointmentProduct[]
}

model Professional {
  id             String        @id @default(uuid())
  name           String
  image          String?
  specialty      String        @default("")
  availableTimes String[]      @default([])
  totalCuts      Int           @default(0)
  rating         Float         @default(5.0)
  status         Boolean       @default(true)
  userId         String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  appointments   Appointment[]
  user           User          @relation(fields: [userId], references: [id])
}

model Reminder {
  id          String   @id @default(uuid())
  description String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Category {
  id        String    @id @default(uuid())
  name      String
  order     Int       @default(0)
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]
  user      User      @relation(fields: [userId], references: [id])
}

model Service {
  id           String        @id @default(uuid())
  name         String
  description  String?       @default("")
  image        String?       @default("img-generic.png")
  price        Int
  duration     Int
  status       Boolean       @default(true)
  categoryId   String
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  category     Category      @relation(fields: [categoryId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String?   @default("")
  price       Int       // Price in cents
  status      Boolean   @default(true)
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  appointmentProducts AppointmentProduct[]
}

model AppointmentProduct {
  id            String      @id @default(uuid())
  appointmentId String
  productId     String
  quantity      Int         @default(1)
  unitPrice     Int         // Price per unit in cents at time of appointment
  totalPrice    Int         // Total price for this product line (quantity * unitPrice)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  product       Product     @relation(fields: [productId], references: [id])

  @@unique([appointmentId, productId])
}

model Subscription {
  id        String   @id @default(uuid())
  status    String
  plan      Plan
  priceId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}

model WhatsappMessage {
  id                  String   @id @default(cuid())
  confirmationMessage String
  cancellationMessage String
  userId              String   @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("whatsapp_messages")
}

model Review {
  id        String   @id @default(uuid())
  name      String
  rating    Int      // Nota de 0 a 5
  comment   String
  clinicId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clinic    User     @relation(fields: [clinicId], references: [id], onDelete: Cascade)
}

model User {
  id                 String           @id @default(cuid())
  name               String?
  email              String           @unique
  emailVerified      DateTime?
  image              String?
  address            String?          @default("")
  phone              String?          @default("")
  pix                String?          @default("")
  status             Boolean          @default(true)
  timezone           String?
  stripe_customer_id String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  times              String[]         @default([])
  workingDays        String[]         @default(["monday", "tuesday", "wednesday", "thursday", "friday"])
  headerColor        String?          @default("bg-emerald-500")
  accounts           Account[]
  appointments       Appointment[]
  Authenticator      Authenticator[]
  categories         Category[]
  professionals      Professional[]
  products           Product[]
  reminders          Reminder[]
  reviews            Review[]
  services           Service[]
  sessions           Session[]
  subscription       Subscription?
  whatsappMessage    WhatsappMessage?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Plan {
  BASIC
  PROFISSIONAL
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
}

enum PaymentMethod {
  CASH
  PIX
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
}
