generator client {
  provider = "prisma-client-js"
  // Remover esta linha: output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Appointment {
  id              String   @id @default(uuid())
  name            String
  email           String
  phone           String
  appointmentDate DateTime
  time            String
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  serviceId       String
  service         Service  @relation(fields: [serviceId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model Reminder {
  id          String   @id @default(uuid())
  description String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Category {
  id        String    @id @default(uuid())
  name      String
  order     Int       @default(0)
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]
  user      User      @relation(fields: [userId], references: [id])
}

model Service {
  id           String        @id @default(uuid())
  name         String
  description  String?       @default("")
  image        String?       @default("img-generic.png")
  price        Int
  duration     Int
  status       Boolean       @default(true)
  categoryId   String
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  category     Category      @relation(fields: [categoryId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
}

model Subscription {
  id        String   @id @default(uuid())
  status    String
  plan      Plan
  priceId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}

model Professional {
  id             String   @id @default(uuid())
  name           String
  image          String?
  availableTimes String[] @default([])
  totalCuts      Int      @default(0)
  rating         Float    @default(5.0)
  status         Boolean  @default(true)
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model WhatsappMessage {
  id                  String   @id @default(cuid())
  confirmationMessage String
  cancellationMessage String
  userId              String   @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("whatsapp_messages")
}

model User {
  id                 String           @id @default(cuid())
  name               String?
  email              String           @unique
  emailVerified      DateTime?
  image              String?
  address            String?          @default("")
  phone              String?          @default("")
  status             Boolean          @default(true)
  timezone           String?
  stripe_customer_id String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  times              String[]         @default([])
  headerColor        String?          @default("bg-emerald-500")
  accounts           Account[]
  appointments       Appointment[]
  Authenticator      Authenticator[]
  categories         Category[]
  professionals      Professional[]
  reminders          Reminder[]
  services           Service[]
  sessions           Session[]
  subscription       Subscription?
  whatsappMessage    WhatsappMessage?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Plan {
  BASIC
  PROFISSIONAL
}
